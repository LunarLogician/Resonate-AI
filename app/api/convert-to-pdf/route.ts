import { NextResponse } from 'next/server';
import puppeteer from 'puppeteer';
import fs from 'fs';
import path from 'path';

export async function POST(request: Request) {
  try {
    const { text } = await request.json();

    // Get the absolute path to the logo
    const logoPath = path.join(process.cwd(), 'public', 'logo.png');
    const logoBase64 = fs.readFileSync(logoPath, { encoding: 'base64' });

    // Launch a new browser instance
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      executablePath: process.env.NODE_ENV === 'production' 
        ? process.env.PUPPETEER_EXECUTABLE_PATH
        : puppeteer.executablePath(),
    });

    try {
      // Create a new page
      const page = await browser.newPage();

      // Set the content with improved styling
      await page.setContent(`
        <html>
          <head>
            <style>
              @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');
              
              body {
                font-family: 'Inter', sans-serif;
                line-height: 1.6;
                color: #1a1a1a;
                padding: 40px;
                max-width: 800px;
                margin: 0 auto;
              }
              
              .header {
                display: flex;
                align-items: center;
                margin-bottom: 30px;
                padding-bottom: 20px;
                border-bottom: 2px solid #f0f0f0;
              }
              
              .logo {
                width: 120px;
                height: auto;
                margin-right: 20px;
              }
              
              .title {
                font-size: 24px;
                font-weight: 600;
                color: #1a1a1a;
                margin: 0;
              }
              
              .subtitle {
                font-size: 14px;
                color: #666;
                margin: 5px 0 0 0;
              }
              
              .content {
                font-size: 14px;
                line-height: 1.8;
                color: #333;
              }
              
              .content p {
                margin-bottom: 16px;
              }
              
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 2px solid #f0f0f0;
                font-size: 12px;
                color: #666;
                text-align: center;
              }
              
              .timestamp {
                font-size: 12px;
                color: #666;
                margin-top: 30px;
                text-align: right;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <img src="data:image/png;base64,${logoBase64}" class="logo" alt="Resonate AI Logo" />
              <div>
                <h1 class="title">Resonate AI Note</h1>
                <p class="subtitle">AI-Powered Analysis and Insights</p>
              </div>
            </div>
            
            <div class="content">
              ${text.split('\n').map((line: string) => `<p>${line}</p>`).join('')}
            </div>
            
            <div class="timestamp">
              Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}
            </div>
            
            <div class="footer">
              <p>Generated by Resonate AI | www.resonate.ai</p>
            </div>
          </body>
        </html>
      `);

      // Generate PDF with improved settings
      const pdf = await page.pdf({
        format: 'A4',
        margin: {
          top: '40px',
          right: '40px',
          bottom: '40px',
          left: '40px',
        },
        printBackground: true,
      });

      // Close the browser
      await browser.close();

      // Return the PDF
      return new NextResponse(pdf, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': 'attachment; filename="resonate-note.pdf"',
        },
      });
    } catch (error) {
      await browser.close();
      throw error;
    }
  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
} 