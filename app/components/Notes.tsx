import { useState } from 'react';
import { jsPDF } from 'jspdf';
import { FileDown } from 'lucide-react';

interface Note {
  id: string;
  content: string;
  timestamp: number;
}

interface NotesProps {
  notes: Note[];
  onAddNote: (content: string) => void;
  onDeleteNote: (id: string) => void;
}

export default function Notes({ notes, onAddNote, onDeleteNote }: NotesProps) {
  const [newNote, setNewNote] = useState('');

  const handleAddNote = () => {
    if (newNote.trim()) {
      onAddNote(newNote);
      setNewNote('');
    }
  };

  const exportNoteToPDF = (note: Note) => {
    // Create new document with A4 format
    const doc = new jsPDF({
      format: 'a4',
      unit: 'mm',
      orientation: 'portrait'
    });

    // Set margins (standard A4 margins)
    const margin = 25; // 25mm margins
    const pageWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const contentWidth = pageWidth - (margin * 2);

    // Format content
    const content = note.content.replace(/[#*_`]/g, '');
    const date = new Date(note.timestamp).toLocaleString();
    
    // Add header with logo styling
    doc.setFontSize(24);
    doc.setTextColor(0, 0, 0);
    doc.text('Resonate AI', margin, margin);
    
    // Add subtitle
    doc.setFontSize(16);
    doc.setTextColor(100, 100, 100);
    doc.text('Report Intelligence Note', margin, margin + 10);
    
    // Add date
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated: ${date}`, margin, margin + 20);
    
    // Add content with proper text wrapping
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    const splitText = doc.splitTextToSize(content, contentWidth);
    doc.text(splitText, margin, margin + 30);
    
    // Add footer
    const footerText = 'Generated by Resonate AI - Report Intelligence';
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text(footerText, margin, pageHeight - margin);
    
    // Save with standardized filename
    doc.save('resonateai-report-intelligence-note.pdf');
  };

  return (
    <div className="bg-white p-4 rounded-xl border border-zinc-200 mb-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-sm font-medium">üìù Notes</h3>
        {notes.length > 0 && (
          <button
            onClick={() => {
              // Create new document for all notes
              const doc = new jsPDF({
                format: 'a4',
                unit: 'mm',
                orientation: 'portrait'
              });

              const margin = 25;
              const pageWidth = 210;
              const pageHeight = 297;
              const contentWidth = pageWidth - (margin * 2);
              let yPos = margin;

              // Add header
              doc.setFontSize(24);
              doc.setTextColor(0, 0, 0);
              doc.text('Resonate AI', margin, yPos);
              yPos += 10;

              doc.setFontSize(16);
              doc.setTextColor(100, 100, 100);
              doc.text('Report Intelligence Notes', margin, yPos);
              yPos += 10;

              doc.setFontSize(12);
              doc.text(`Generated on ${new Date().toLocaleString()}`, margin, yPos);
              yPos += 20;

              // Add notes
              notes.forEach((note, index) => {
                const content = note.content.replace(/[#*_`]/g, '');
                const date = new Date(note.timestamp).toLocaleString();
                
                // Add new page if needed
                if (yPos > pageHeight - margin * 2) {
                  doc.addPage();
                  yPos = margin;
                }

                // Add note header
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text(`Note ${index + 1}`, margin, yPos);
                yPos += 5;

                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                doc.text(date, margin, yPos);
                yPos += 10;

                // Add note content
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                const lines = doc.splitTextToSize(content, contentWidth);
                doc.text(lines, margin, yPos);
                yPos += lines.length * 7 + 15;
              });

              // Add footer
              doc.setFontSize(10);
              doc.setTextColor(150, 150, 150);
              doc.text('Generated by Resonate AI - Report Intelligence', margin, pageHeight - margin);

              // Save the PDF
              doc.save('resonateai-report-intelligence-notes.pdf');
            }}
            className="px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded-full hover:bg-blue-100"
          >
            Export All to PDF
          </button>
        )}
      </div>

      <div className="space-y-4">
        <div className="flex gap-2">
          <input
            type="text"
            value={newNote}
            onChange={(e) => setNewNote(e.target.value)}
            placeholder="Add a note..."
            className="flex-1 px-3 py-2 text-sm border rounded-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
            onKeyPress={(e) => e.key === 'Enter' && handleAddNote()}
          />
          <button
            onClick={handleAddNote}
            className="px-4 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600"
          >
            Add
          </button>
        </div>

        <div className="space-y-2">
          {notes.map((note) => (
            <div
              key={note.id}
              className="p-3 bg-zinc-50 rounded-lg flex items-start justify-between group"
            >
              <p className="text-sm text-zinc-700">{note.content}</p>
              <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100">
                <button
                  onClick={() => exportNoteToPDF(note)}
                  className="p-1 text-blue-500 hover:text-blue-600"
                  title="Export to PDF"
                >
                  <FileDown size={16} />
                </button>
                <button
                  onClick={() => onDeleteNote(note.id)}
                  className="p-1 text-zinc-400 hover:text-red-500"
                  title="Delete note"
                >
                  √ó
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
} 